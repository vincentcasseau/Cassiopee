#! /bin/bash
# Lancement de python en parallele
# kpython -n 2 script.py: lance 2 process, choisit le nbre de threads en fonction de la ressource
# kpython -n2 -t4 script.py: lance 2 process avec 4 threads chacuns
# kpython -a "env::" -n2 script.py: lance mpirun avec une option supplementaire
# kpython -p: ajoute un profiling python
if ([ $# -eq 0 ])
then
    echo 'kpython -n 5 -t 2 script.py'
    exit 1
fi

# executable python
if [ "$PYTHONEXE" = "" ]; then
    PYTHONEXE=python
fi

# OMP_NUM_THREADS init
if [ -n "$OMP_NUM_THREADS" ]
then
    OMPNUMTHREADSINIT=$OMP_NUM_THREADS
else
    OMPNUMTHREADSINIT="1"
fi

# Ressources 
if [ -n "$OMP_NUM_THREADS" ]
then
    ncpu=$OMP_NUM_THREADS # suppose que l'OMP_NUM_THREADS de env correspond a tous les coeurs disponibles
else
    ncpu=$(grep processor /proc/cpuinfo |tail -1 |cut -f2 -d: )
    if [ -z "$ncpu" ]
    then
        ncpu=1
    else
        ncpu=$((ncpu + 1 ))
    fi
fi

if [ -z "$ELSAPROD" ]
then
    ELSAPROD="xx"
fi

# set mpi number of processes (-n)
NPROCS="0"
# set number of threads (-t)
NTHREADS="0"
# more args for mpirun (-a)
ARGS=""
# SANITIZE (-s)
SANITIZE="0"

while getopts :hpsn:t:a: OPTION
do
    case $OPTION in
        h)
            echo 'ex: kpython -n 5 -t 2 script.py'
            echo 'Run 5 processes with 2 threads.'
            echo 'kpython -a "args": pass args to mpi run.'
            echo 'kpython -s: use sanitize if compiled in debug.'    
            exit 1
            ;;
        n)
            if [[ ${OPTARG:0:1} == "p" ]]
            then
                NPROCS=${OPTARG:1}
            else
                NPROCS=$OPTARG
            fi
            ;;
        t)
            NTHREADS=$OPTARG
            ;;
        a)
            ARGS+=$OPTARG
            ;;
        p) 
            ARGS+="-m cProfile -s tottime"
            ;;
        s) 
            SANITIZE="1"
            ;;
        
        \?)
            PYARGS+=$OPTARG
            ;;
    esac
done
shift $((OPTIND-1))
# Remaining script name and arguments
SCRIPT=$*

# Machine avec remote GL (utilisant virtual GL)
#if command -v xdpyinfo &> /dev/null
#then
#    xdpyinfo &> /dev/null
#    if [ $? == 0 ]; then
#        xdpyinfo | grep VNC &> /dev/null
#        if [ $? -eq 0 ]; then
#            cat $SCRIPT | grep "offscreen=1" > /dev/null
#            if [ $? -ne 0 ]; then
#                cat $SCRIPT | grep "offscreen=7" > /dev/null
#                if [ $? -ne 0 ]; then
#                    cat $SCRIPT | grep "offscreen=5" > /dev/null
#                    if [ $? -ne 0 ]; then
#                        PYTHONEXE='vglrun '$PYTHONEXE
#                    fi
#                fi
#            fi
#        fi
#    fi
#fi

if [ "$NTHREADS" = "0" ]
then
    if [ "$NPROCS" != "0" ]
    then
        NTHREADS=`expr $ncpu / $NPROCS`
    else
        NTHREADS=$ncpu
    fi
    if [ "$NTHREADS" = "0" ]
    then
        NTHREADS=1
    fi
fi
echo 'Running '$SCRIPT' with Nprocs='$NPROCS' and Nthreads='$NTHREADS

if [ "$NPROCS" = "0" ]
then
    export MPIRUN=0
    export OMP_NUM_THREADS=$NTHREADS
    if [ $SANITIZE = '1' ]
    then
        export LD_PRELOAD=$ASAN_LIB
        $PYTHONEXE $ARGS $SCRIPT
        unset LD_PRELOAD
    else
        $PYTHONEXE $ARGS $SCRIPT
    fi
    export OMP_NUM_THREADS=$OMPNUMTHREADSINIT
    unset MPIRUN
else
    export MPIRUN=1
    export OMP_NUM_THREADS=$NTHREADS
    if [ "$ELSAPROD" = 'x86_r8' ] # eos
    then
        # intelMpi
        mpirun $ARGS -n $NPROCS -genv OMP_NUM_THREADS=$NTHREADS -l $PYTHONEXE $SCRIPT
        [ $? != 0 ] && exit 1;
    elif [ "$ELSAPROD" = 'ld' ] || [ "$ELSAPROD" = 'ld_i8' ] || [ "$ELSAPROD" = 'ld_DBG' ] || [ "$ELSAPROD" = 'ld_i8_DBG' ] # ld
    then
        # openMpi    
        if [ $SANITIZE = '1' ]
        then
            mpirun $ARGS -x OMP_NUM_THREADS=$NTHREADS -x LD_PRELOAD=$ASAN_LIB -np $NPROCS $PYTHONEXE $SCRIPT
        else
            mpirun $ARGS -x OMP_NUM_THREADS=$NTHREADS -np $NPROCS $PYTHONEXE $SCRIPT
        fi
        [ $? != 0 ] && exit 1;
    elif [ "$ELSAPROD" = 'visung_r8' ] || [ "$ELSAPROD" = 'visung_r8_i8' ] # visung
    then
        # openMpi
        mpirun $ARGS -x OMP_NUM_THREADS=$NTHREADS -np $NPROCS $PYTHONEXE $SCRIPT
        [ $? != 0 ] && exit 1;
    elif [ "$ELSAPROD" = 'aus_r8' ] # austri
    then
        # intelMpi
        mpirun $ARGS -n $NPROCS -genv OMP_NUM_THREADS=$NTHREADS -l $PYTHONEXE $SCRIPT
        [ $? != 0 ] && exit 1;
    elif [ "$ELSAPROD" = 'sat_r8' ] # sator
    then
        # intelMpi
        mpirun $ARGS -n $NPROCS -l -ordered-output $PYTHONEXE $SCRIPT
        [ $? != 0 ] && exit 1;
    elif [ "$ELSAPROD" = 'sat_cas_r8' ] || [ "$ELSAPROD" = 'sat_cas_r8_i8' ] # sator-new
    then
        # intelMpi
        mpirun $ARGS -n $NPROCS -l -ordered-output $PYTHONEXE $SCRIPT
        [ $? != 0 ] && exit 1;
    elif [ "$ELSAPROD" = 'spiro_el8' ] || [ "$ELSAPROD" = 'spiro_el8_i8' ] || [ "$ELSAPROD" = 'spiro_amdrm_r8' ] || [ "$ELSAPROD" = 'spiro_amdnp_r8' ] || [ "$ELSAPROD" = 'spiro_sky_r8' ] || [ "$ELSAPROD" = 'spiro_cas_r8' ] # spiro
    then
        # intelMpi
        mpirun $ARGS -n $NPROCS -genv OMP_NUM_THREADS=$NTHREADS -l -ordered-output $PYTHONEXE $SCRIPT
        [ $? != 0 ] && exit 1;
    elif [ "$ELSAPROD" = 'juno' ] || [ "$ELSAPROD" = 'juno_i8' ] || [ "$ELSAPROD" = 'juno_DBG' ] || [ "$ELSAPROD" = 'juno_i8_DBG' ] # juno
    then
        # intelMpi
        mpirun $ARGS -n $NPROCS -genv OMP_NUM_THREADS=$NTHREADS -l -ordered-output $PYTHONEXE $SCRIPT
        [ $? != 0 ] && exit 1;
    elif [ "$ELSAPROD" = 'juno_gcc' ] || [ "$ELSAPROD" = 'juno_gcc_i8' ] || [ "$ELSAPROD" = 'juno_gcc_DBG' ] || [ "$ELSAPROD" = 'juno_gcc_i8_DBG' ] # juno gcc
    then
        # openMpi
        if [ $SANITIZE = '1' ]
        then
            mpirun $ARGS -x LD_PRELOAD=$ASAN_LIB -x OMP_NUM_THREADS=$NTHREADS -np $NPROCS $PYTHONEXE $SCRIPT
        else
            mpirun $ARGS -x OMP_NUM_THREADS=$NTHREADS -np $NPROCS $PYTHONEXE $SCRIPT
        fi
        [ $? != 0 ] && exit 1;    
    elif [ "$ELSAPROD" = 'cob_r8' ] # cobalt
    then
        export OMP_NUM_THREADS=$NTHREADS
        ccc_mprun -n $NPROCS $PYTHONEXE $SCRIPT
        [ $? != 0 ] && exit 1;
    elif [ "$ELSAPROD" = 'msys64' ] # MSYS 2 With Win64 production
    then
	    # MSMPI
	    mpiexec $ARGS -np $NPROCS $PYTHONEXE $SCRIPT
        [ $? != 0 ] && exit 1;
    elif [ "$ELSAPROD" = 'win64' ] # MSYS 2 With Win64 production
    then
	    # MSMPI
	    mpiexec $ARGS -np $NPROCS $PYTHONEXE $SCRIPT
        [ $? != 0 ] && exit 1;
    else # default 
        mpirun $ARGS -np $NPROCS $PYTHONEXE $SCRIPT
        [ $? != 0 ] && exit 1;
    fi
    unset MPIRUN
    export OMP_NUM_THREADS=$OMPNUMTHREADSINIT
fi
